pipeline {
  agent any

  tools {
    nodejs "node"
  }

  environment {
        GOOGLE_PROJECT_ID = "ivory-honor-272915" 
        GOOGLE_PROJECT_NAME = "Proyecto-ideas-extraordinarias"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('sc_jenkins_terraform')
        GOOGLE_CLOUD_KEYFILE_JSON = credentials('sc_jenkins_terraform')
    }
  
  parameters {
    string(name: 'container_name', defaultValue: 'sa_page', description: 'Nombre del contenedor de docker.')
    string(name: 'image_name', defaultValue: 'img_page', description: 'Nombre de la imagene docker.')
    string(name: 'tag_image', defaultValue: 'lts', description: 'Tag de la imagen de la página.')
    string(name: 'container_port', defaultValue: '80', description: 'Puerto que usa el contenedor')
    choice(name: 'ENTORNOS', choices: ['dev', 'pre', 'pro'], description: 'Seleccione el entorno a utilizar')
    choice(name: 'ACCION', choices: ['', 'plan-apply', 'destroy'], description: 'Seleccione el entorno a utilizar')
    
  }

  stages {
    stage('install') {
      steps {
        git branch: 'jenkins', url: 'https://github.com/201700670/SA_Practicas.git'
        dir('frontend') {
          sh 'npm install'
        }
      }
    }

    
    stage('checkaout') { 
            steps {
              cleanWs()
              sh 'env'
            }
    }

    stage("git clone code terraform"){
            steps {
                cleanWs()
                    checkout([$class: 'GitSCM', 
                    branches: [[name: '*/feature/practica7']], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'CleanCheckout']], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [
                        [url: 'git@github.com:201700670/SA_Practicas.git', credentialsId: '']
                        ]])
                sh 'pwd' 
                sh 'ls -l'
            }
        }  
  }
  stage('init') {
         steps {
            sh 'terraform --version'
            sh ' cd bastion && gcloud projects list'
            sh ' cd bastion && terraform init -var-file="../variables/dev.tfvars" '
         } 
  }

  stage('plan') {
            steps {
               sh 'cd bastion && terraform plan  -refresh=true  -var-file="../variables/dev.tfvars" -lock=false'
            } 
  }

  stage('Confirmación de accion') {
            steps {
                script {
                    def userInput = input(id: 'confirm', message: params.ACCION + '?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply terraform', name: 'confirm'] ])
                }
            }
  }
        
  stage('apply or destroy') {
            steps {
               sh 'echo "comienza"'
            script{  
                if (params.ACCION == "destroy"){
                         sh ' echo "llego" + params.ACCION'   
                         sh 'cd bastion && terraform destroy -var-file="../variables/dev.tfvars" -auto-approve'
                } else {
                         sh ' echo  "llego" + params.ACCION'                 
                         sh 'cd bastion && terraform apply -refresh=true -var-file="../variables/dev.tfvars"  -auto-approve'  
                }  

            }
            } 
        }  
   } 
    
}
